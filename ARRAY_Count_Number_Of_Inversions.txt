// count inversions in an array
// using enhanced merge sort O(nlogn)

class Test {

	static int mergeSort(int arr[]) {
	
		int temp[] = new int[arr.length];
		return _mergeSort(arr, temp, 0, arr.length - 1);
		
	}
	
	static int _mergeSort(int arr[], int temp[], int left, int right) {
	
		int mid, inv = 0;
		if (right > left) {
		
			// find the middle of the array
			// call _mergeSort on the two resulting arrays
			mid = (left + right) / 2;
			
			inv = _mergeSort(arr, temp, left, mid);
			inv += _mergeSort(arr, temp, mid + 1, right);
			
			
			// merge the two parts
			inv += merge(arr, temp, left, mid+1, right);
		
		}
		return inv;
	
	}
	
	static int merge(int arr[], int temp[], int left, int mid, int right) {
	
		int i, j,k, inv = 0;
		
		i = left; // i index for left subarray
		j = mid; // j index for right subarray
		k = left; // k index for resultant merge array
		
		while ((i <= mid - 1) && (j <= right)) {
		
			if (arr[i] <= arr[j]) {
				
				temp[k++] = arr[i++];
			
			} else {
			
				temp[k++] = arr[j++];
				
				inv = inv + (mid - i);
			
			}
		}
		
		// copy the remaining elements of left subarray
		while (i <= mid - 1) {
			temp[k++] = arr[i++];
		}
		
		// copy the remaining elements of right subarray
		while (j <= right) {
			temp[k++] = arr[j++];
		}
		
		for (int i = left; i<=right; i++)
			arr[i] = temp[i];
			
		return inv;
	
	}

	public static void main(String[] args) {
	
		int arr[] = {1,20,6,4,5};
		System.out.println("Number of inversions are " + mergeSort(arr));
	
	}
}