// Given an array A[] and a number x, check for pair in A[] with sum x

class Main {

	static int hasArray2Candidates(int arr[], int size, int sum) {
	
		QuickSort(arr, 0, size - 1);
		
		// now we look for the 2 candidates in the sorted array
		int l = 0;
		int r = size - 1;
		while (l < r) {
			if (arr[l] + arr[r] == sum) {
				return 1;
			} else if (arr[l] + arr[r] < sum) {
				l++;
			} else r--;
		}
		
		return 0;
	
	}
	
	static void main(String[] args) {
	
		int A[] = {1, 4, 45, 6, 10, -8};
        int n = 16;
        int arr_size = 6;
          
        if( hasArrayTwoCandidates(A, arr_size, n) == 1)
            System.out.println("Array has two "+ 
                         "elements with the given sum");
        else
            System.out.println("Array doesn't have "+
                      "two elements with the given sum");
	
	}
	
	// QUICKSORT!!
	
	/* This function takes last element as pivot,
       places the pivot element at its correct
       position in sorted array, and places all
       smaller (smaller than pivot) to left of
       pivot and all greater elements to right
       of pivot */
       static int partition(int arr[], int low, int high) {
       		int pivot = arr[high];
       		
       		// index of smaller element
       		int i = (low - 1);
       		for (int j = low; j <= high - 1; j++) {
       			// if current element is smaller or equal to pivot
       			if (arr[j] <= pivot) {
       				i++;
       				// swap arr[i] and arr[j]
       				int temp = arr[i];
       				arr[i] = arr[j];
       				arr[j] = temp;
       			
       			} 
       		}
       		
       		//swap arr[i+1] and arr[high] or pivot
       		int temp = arr[i+1];
       		arr[i+1] = arr[high];
       		arr[high] = temp;
       		
       		return i+1;
       		
       	}
       	
       	static void QuickSort(int arr[], int low, int high) {
       		if (low < high) {
       		
       			// pi is partitioning index, arr[pi] is now at right place
       			int pi = partition(arr, low, high);
       			// recursively sort elements before partitioning and after partitioning
       			sort(arr, low, pi - 1);
       			sort(arr, pi + 1, high);
       		}
       	}
	
}


// Method 2: use hash map, complexity time is O(n) and space complexity is O(R)
// where R is the range of the integers
// this method works if the range of numbers is known
// This works even if the range of numbers contains negative numbers. In that case
// all we have to do is to make everything positive by adding the absolute value 
// of smallest negative integer to all numbers
class PairSum {


	private static final int MAX = 10000;
	
	static void printSum(int arr[], int sum) {
	
		// initialize the hashmap to false
		boolean binmap[] = new boolean[MAX];
		
		for (int i = 0; i < arr.length; i++) {
		
			int temp = sum - arr[i];
			
			if (temp >= 0 && binmap[temp]) {
				System.out.println("The pair is " + arr[i] + " " + temp);
			}
			binmap[arr[i]] = true;
		
		}
	
	}
	
	
	public static void main(String args[]) {
		int A[] = {1,4,45,6,10,8};
		int n = 16;
		printPairs(A, n);
	
	}


}