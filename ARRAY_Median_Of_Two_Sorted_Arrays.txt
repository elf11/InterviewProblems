// find median of two sorted merged arrays

// a simple merge based O(n) solution (there is a better O(logn) solution)

class Main {

	static int getMedian(int ar1[], int ar2[], int n) {
		int i = 0;
		int j = 0;
		int count;
		int m1 = -1, m2 = -1;
		
		
		// since there are 2n elements the median will be the average of elements
		// at index n-1 and n in the array obtained after merging ar1 and ar2
		
		for (count = 0; count <= n; count++) {
			// the case below handles when all the elements of ar1[]
			// are smaller than the smallest (or first) element of ar2[]
			if (i == n) {
				m1 = m2;
				m2 = ar2[0];
				break;
			}
			
			// the case below handles when all the eleemnts of ar2[] are smaller
			// than smallest (or first) element of ar1[]
			if (j == n) {
				m1 = m2;
				m2 = ar1[0];
				break;
			}
			
			if (ar1[i] < ar2[j]) {
			
				// store the prev median
				m1 = m2;
				m2 = ar1[i];
				i++;
			
			} else {
			
				m1 = m2;
				m2 = ar2[j];
				j++;
			}
			
			
		}
		
		return (m1 + m2) /2;
	
	}


	static void main(String[] args) {
		int ar1[] = {1, 12, 15, 26, 38};
        int ar2[] = {2, 13, 17, 30, 45};
      
        int n1 = ar1.length;
        int n2 = ar2.length;
        if (n1 == n2)
            System.out.println("Median is " +
                        getMedian(ar1, ar2, n1));
        else
            System.out.println("arrays are of unequal size");
	}


}


// divide and conquer solution O(logn)

class Median {

	static int getMedian(int ar1[], int ar2[], int n) {
	
		if (n <= 0)
			return -1;
		if (n == 1)
			return (ar1[0] + ar2[0]) / 2;
		if (n == 2)
			return (Math.max(ar1[0], ar2[0]) + Math.min(ar1[1], ar2[1]))/2;
			
		// get the median of the two arrays ar1 and ar2
		int m1 = median(ar1, n);
		int m2 = median(ar2, n);
		
		// if medians are equal then return either m1 or m2
		if (m1 == m2)
			return m1;
			
		// if m1 < m2 then median must exist in start_ar2 to m2 or m1 to end_ar1
		if (m1 < m2) {
			if (n %2 == 0)
				return getMedian(ar1 + n/2 - 1, ar2, n - n/2 + 1);
			return getMedian(ar1 + n/2, ar2, n - n/2);
		}
		
		// if m1 > m2 then median must exist in start_ar1 to m1 and m2 to end_ar2
		if (n % 2 == 0)
			return getMedian(ar2 + n/2 -1, ar1, n - n/2 + 1);
		return getMedian(ar2 + n/2, ar1, n - n/2);
		
	}

	static int median(int arr[], int n) {
		if (n %2 == 0)
			return (arr[n/2] + arr[n/2 -1])/2;
		else
			return arr[n/2];
	}


	static void main(String[] args) {
		int ar1[] = {1,2,3,6};
		int ar2[] = {4,6,8,10};
		int n1 = ar1.length;
		int n2 = ar2.length;
		
		if (n1 == n2)
			System.out.println("median is " + getMedian(ar1, ar2, n1));
		else
			System.out.println("Arrays have different lengths");
	}
}

