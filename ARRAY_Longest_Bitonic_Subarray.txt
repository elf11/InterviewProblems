// maximum length bitonic subarray

//Given an array A[0 … n-1] containing n positive integers, 
// a subarray A[i … j] is bitonic if there is a k with i <= k <= j 
//such that A[i] <= A[i + 1] ... <= A[k] >= A[k + 1] >= .. A[j – 1] 
// > = A[j]. Write a function that takes an array as argument and 
// returns the length of the maximum length bitonic subarray.

//A[] = {12, 4, 78, 90, 45, 23}, the maximum length bitonic subarray 
//is {4, 78, 90, 45, 23} which is of length 5.

// A[] = {20, 4, 1, 2, 3, 4, 2, 10}, the maximum length bitonic 
// subarray is {1, 2, 3, 4, 2} which is of length 5.

// A[] = {10} => 1

/*
Let us consider the array {12, 4, 78, 90, 45, 23} to understand the soultion.
1) Construct an auxiliary array inc[] from left to right such that inc[i] contains length of the nondecreaing subarray ending at arr[i].
For for A[] = {12, 4, 78, 90, 45, 23}, inc[] is {1, 1, 2, 3, 1, 1}

2) Construct another array dec[] from right to left such that dec[i] contains length of nonincreasing subarray starting at arr[i].
For A[] = {12, 4, 78, 90, 45, 23}, dec[] is {2, 1, 1, 3, 2, 1}.

3) Once we have the inc[] and dec[] arrays, all we need to do is find the maximum value of (inc[i] + dec[i] – 1).
For {12, 4, 78, 90, 45, 23}, the max value of (inc[i] + dec[i] – 1) is 5 for i = 3.
*/

// O(n) time complexity, O(n) space complexity

class Bitonic {


	static int bitonic(int arr[]) {
	
		int n = arr.length;
		int[] inc = new int[n];
		int[] dec = new int[n];
		
		inc[0] = 1;
		dec[0] = 1;
		
		int max;
		
		for (int i = 1; i < n; i++)
			inc[i] = (arr[i] >= arr[i-1]) ? : inc[i-1] + 1 : 1;
		
		for (int i = n -2; i>=0; i--)
			dec[i] = (arr[i] >= arr[i+1]) ? : dec[i+1] + 1 : 1;
		
		max = inc[0] + dec[0] - 1;
		
		for (int i = 1; i < n; i++)
			if (inc[i]  + dec[i] - 1 > max)
				max = inc[i] + dec[i] - 1;
				
		return max;
	}
	
	public static void main (String[] args)
    {
        int arr[] = {12, 4, 78, 90, 45, 23};
        int n = arr.length;
        System.out.println("Length of max length Bitnoic Subarray is "
                            + bitonic(arr));
    }

}
