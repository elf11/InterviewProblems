// k sorted arrays
// given k sorted arrays of size n each merge them and print the sorted output

// efficient solution in O(nklogk) using a priorityqueue / min heap

// inefficient solution copy the arrays to a n*k final array
// and sort them using an O(nlogn) algorith -> complexity O(nklognk)

class ArrayContainer implements Comparable<ArrayContainer> {

	int[] arr;
	int index;
	
	public ArrayContainer(int[] arr, int i) {
		this.arr = arr;
		this.index = i;
	}
	
	@Override
	public int compareTo(ArrayContainer o) {
		return this.arr[this.index] - o.arr[o.index];
	}

}

public class KSortedArrays {

	public static int[] mergeSortedArray(int[][] arr) {
	
		PriorityQueue<ArrayContainer> queue = new PriorityQueue<ArrayContainer>();
		int total = 0;
		
		//add arrays to heap
		for (int i =0; i < arr.length; i++) {
			queue.add(new ArrayContainer(arr[i], 0));
			total = total + arr[i].length;
		}
		
		int m = 0;
		int result[] = new int[total];
		
		//while heap is not empty
		while (!queue.isEmpty()) {
			ArrayContainer ac = queue.poll();
			result[m++] = ac.arr[ac.index];
			
			if (ac.index < ac.arr.length - 1) {
				queue.add(new ArrayContainer(ac.arr, ac.index + 1));
			}
		}
		
		return result;
	
	}


	public static void main(String[] args) {
	
		int[] arr1 = {1,3,5,7};
		int[] arr2 = {2,4,6,8};
		int[] arr3 = {0,9,10,11};
		
		int[] result = mergeSortedArray(new int[][]{arr1,arr2,arr3});
		System.out.println(Arraya.toString(result));
	
	}
}