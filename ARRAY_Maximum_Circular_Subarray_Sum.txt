/* Given n numbers (both +ve and -ve), arranged in a circle, fnd the maximum sum of consecutive number.
*/

/*
There can be two cases for the maximum sum:

Case 1: The elements that contribute to the maximum sum are arranged such that no wrapping is 
there. Examples: {-10, 2, -1, 5}, {-2, 4, -1, 4, -1}. In this case, Kadane’s algorithm will produce the result.

Case 2: The elements which contribute to the maximum sum are arranged such that wrapping i
s there. Examples: {10, -12, 11}, {12, -5, 4, -8, 11}. In this case, we change wrapping 
to non-wrapping. Let us see how. Wrapping of contributing elements implies non wrapping 
of non contributing elements, so find out the sum of non contributing elements and subtract 
this sum from the total sum. To find out the sum of non contributing, invert sign of each 
element and then run Kadane’s algorithm.
Our array is like a ring and we have to eliminate the maximum continuous negative that 
implies maximum continuous positive in the inverted arrays.

Finally we compare the sum obtained by both cases, and return the maximum of the two sums.
*/

class MaxCircularSum {

	static int maxCircularSum(int[] arr) {
	
	
		int n = arr.length;
		// Case 1: get the maximum sum using standard kadane'
        // s algorithm
		int max_kadane = kadane(arr);
		// Case 2: Now find the maximum sum that includes
        // corner elements.
		int max_wrap = 0;
		
		for (int i =0; i< n; i++) {
			max_wrap += arr[i];
			arr[i] = -arr[i];
		}
	
		// max sum with corner elements will be:
        // array-sum - (-max subarray sum of inverted array)
        max_wrap = max_wrap + kadane(arr);
        
        // The maximum circular sum will be maximum of two sums
        return (max_wrap > max_kadane)? max_wrap: max_kadane;
	}
	
	static int kadane(int[] arr) {
		int n = arr.length;
		int max_so_far = 0, max_ending_here = 0;
		
		for (int i = 0; i < n; i++) {
			max_ending_here = max_ending_here + arr[i];
			if (max_ending_here < 0)
				max_ending_here = 0;
			if (max_so_far < max_ending_here)
				max_so_far = max_ending_here;
		}
		return max_so_far;
	}

	public static void main(String[] args) {
		int a[] =  {11, 10, -20, 5, -3, -5, 8, -13, 10};
        System.out.println("Maximum circular sum is " +
                            maxCircularSum(a));
	}
}